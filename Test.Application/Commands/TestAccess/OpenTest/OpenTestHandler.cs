using Application.Shared.Exceptions;
using MediatR;
using TestAccessEntity = Test.Domain.Entities.TestAccess;
using Test.Domain.Repositories;

namespace Test.Application.Commands.TestAccess.OpenTest
{
    public class OpenTestHandler : IRequestHandler<OpenTestCommand>
    {
        private readonly IUnitOfWork unitOfWork;

        public OpenTestHandler(
            IUnitOfWork unitOfWork)
        {
            this.unitOfWork = unitOfWork;
        }

        public async Task Handle(OpenTestCommand request, CancellationToken cancellationToken)
        {
            var test = await unitOfWork.TestRepository
                .GetTest(request.TestId);

            if (test is null)
            {
                throw new BadRequestApiException("Test doesnt exist");
            }

            var existAccessesTasks = request.ListStudentId
                .Select(x => unitOfWork.TestAccessRepository
                    .GetTestAccess(request.TestId, x))
                .ToList();

            var existAccesses = await Task.WhenAll(existAccessesTasks);

            if(existAccesses.Any(x => x is not null))
            {
                throw new BadRequestApiException("Access test has already opened");
            }

            var getRequiredStudentTask = request.ListStudentId
                .Select(x => unitOfWork.StudentRepository
                    .GetStudent(x))
                .ToList();

            var students = await Task.WhenAll(getRequiredStudentTask);

            if (students.Any(x => x is null))
            {
                throw new BadRequestApiException("Some students doesnt exist");
            }

            var testAccessList = students
                .Select(x => TestAccessEntity
                .Initialize(test, x!, request.TestDuration))
                .ToList();

            if(testAccessList.Any(x => x.IsFailure))
            {
                throw new InternalServerApiException("Something broken");
            }

            await Task.WhenAll(testAccessList.Select(x =>
                unitOfWork.TestAccessRepository.AddTestAccess(x.Value)));

            await unitOfWork.SaveChangesAsync();
        }
    }
}
